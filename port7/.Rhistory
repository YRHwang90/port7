knitr::opts_chunk$set(echo = TRUE)
?rnorm()
x<-rnorm(25, mean=0.7, sd=20)
# produce N(0.7, 20) sample of size 25.
print(x)
t.text(x)
t.test(x)
x<-rnorm(25, mean=0.7, sd=20)
# produce N(0.2, 20) sample of size 25.
print(x)
t.test(x)
x<-rnorm(25, mean=0.7, sd=20)
# produce N(0.3, 20) sample of size 25.
print(x)
t.test(x)
x<-rnorm(25, mean=0.2, sd=20)
# produce N(0.3, 20) sample of size 25.
print(x)
t.test(x) # one sample t-test to see if
x<-rnorm(25, mean=0, sd=100)
# produce N(0.3, 20) sample of size 25.
print(x)
t.test(x) # one sample t-test to see if the true mean score would be 0 or not
#p-value:
y<-rnorm(25, mean=0, sd=5)
# produce N(0.3, 20) sample of size 25.
print(y)
t.test(y) # one sample t-test to see if the true mean score would be 0 or not
#p-value: 0.99.
y<-rnorm(25, mean=0, sd=2)
# produce N(0.3, 20) sample of size 25.
print(y)
t.test(y) # one sample t-test to see if the true mean score would be 0 or not
#p-value: 0.99.
y<-rnorm(25, mean=0, sd=1)
# produce N(0.3, 20) sample of size 25.
print(y)
t.test(y) # one sample t-test to see if the true mean score would be 0 or not
#p-value: 0.99.
y<-rnorm(25, mean=0, sd=1)
# produce N(0.3, 20) sample of size 25.
print(y)
t.test(y) # one sample t-test to see if the true mean score would be 0 or not
#p-value: 0.99.
y<-rnorm(25, mean=0, sd=1)
# produce N(0.3, 20) sample of size 25.
print(y)
t.test(y) # one sample t-test to see if the true mean score would be 0 or not
#p-value: 0.99.
x=seq(-3,3,le=5)
print(x)
x=seq(-3,3,le=5)
print(x)
y=2+4*x+rnorm(5)
lm(y~x)
x=seq(-3,3,le=5)
print(x)
y=2+4*x+rnorm(5)
lm(y~x)
set.seed(0)
x=seq(-3,3,le=5)
print(x)
y=2+4*x+rnorm(5)
lm(y~x)
set.seed(1)
x=seq(-3,3,le=5)
print(x)
y=2+4*x+rnorm(5)
lm(y~x)
?array
fit<-lm(y~x)
fit_residual<-fit$residuals
nBoot=1000 #number of bootstraping samples
B=array(0, dim=c(nBoot,2)) # bootstrap array # Yoo Ri do not understand this
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
}
fit<-lm(y~x)
fit_residual<-fit$residuals
nBoot=1000 #number of bootstraping samples
B=array(0, dim=c(nBoot,2)) # bootstrap array # Yoo Ri do not understand this
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
fit<-lm(y~x)
fit_residual<-fit$residuals
nBoot=1000 #number of bootstraping samples
B=array(0, dim=c(nBoot,2)) # bootstrap array # Yoo Ri do not understand this
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
fit<-lm(y~x)
fit_residual<-fit$residuals
nBoot=1000 #number of bootstraping samples
B=array(0, dim=c(nBoot,2)) # bootstrap array # Yoo Ri do not understand this
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
group=rep(c("female","male"), each=3)
response=rnorm (n=6, mean=0, sd=2)
data.frame(group,response)
replicate(n = 3,
expr = rnorm(n = 5, mean = 0, sd = 1) )
replicate(n = 3,
expr = rnorm(n = 5, mean = 0, sd = 1),
simplify=FALSE)
list1=list() # empty list to save output in.
for(i in 1:3){
list1[[i]]=rnorm(n=10,mean=0,sd=1)
}
print(list1)
for (i in 1:nBoot){
ystar=y+sample(fit_residual,replace=T)
Bfit=lm(ystar~x)
B[i,]=Bfit$coefficients
}
x2=rbinom(100,1,0.5)
?rbinom()
summary(x2)
x2
x2<-ifelse(0,"male","female")
x2=rbinom(100,1,0.5)
x2<-if_else(0,"male","female")
x2<-if_else(x2==0,"male","female")
x2<-ifelse(x2==0,"male","female")
x2<-as.factor(x2)
model1<-lm(y~x1+x2)
set.seed(12)
x1=rnorm(100,50,9)
x2=rbinom(100,1,0.5)
x2<-ifelse(x2==0,"male","female")
x2<-as.factor(x2)
error<-rnorm(100,0,10)
y=3*x1+2*x2+error
x2=rbinom(100,1,0.5)
y=3*x1+2*x2+error
model1<-lm(y~x1+x2)
summary(model1)
autoplot(model1)
library(ggfortify)
install.packages('ggfortify')
library(ggfortify)
# install.packages('ggfortify')
model1<-lm(y~x1+x2)
summary(model1)
set.seed(99)
x1=rnorm(100,50,9)
x2=rbinom(100,1,0.5)
#
# x2<-ifelse(x2==0,"male","female")
# x2<-as.factor(x2)
error<-rnorm(100,0,10)
# generating DV
y=3*x1+2*x2+error
model1<-lm(y~x1+x2)
summary(model1)
autoplot(model1)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
multi1<-MASS::mvrnorm(n=100,
mu=c(0.5,1,3),
Sigma=matrix(c(1,2,3,
2,1,4,
3,4,1),
nrow=3))
library(MASS)
multi1<-MASS::mvrnorm(n=100,
mu=c(0.5,1,3),
Sigma=matrix(c(1,2,3,
2,1,6,
3,6,1),
nrow=3))
library(MASS)
multi1<-MASS::mvrnorm(n=100,
mu=c(0.5,1,3),
Sigma=matrix(c(1,0.2,0.3,
0.2,1,0.6,
0.3,6,0.1),
nrow=3))
library(MASS)
ata2 <- mvrnorm(n = 1000,        # Create random data
mu = c(0.5, 0, 10),
Sigma = matrix(c(1, 0.2, 0.3,
0.2, 1, 0.6,
0.3, 0.6, 1),
nrow = 3))
print(multi1)
library(MASS)
mul1 <- mvrnorm(n = 1000,
mu = c(0.5, 0, 10),
Sigma = matrix(c(1, 0.2, 0.3,
0.2, 1, 0.6,
0.3, 0.6, 1),
nrow = 3))
print(mul1)
library(MASS)
mul1 <- mvrnorm(n = 50,
mu = c(0.5, 0, 10),
Sigma = matrix(c(1, 0.2, 0.3,
0.2, 1, 0.6,
0.3, 0.6, 1),
nrow = 3))
print(mul1)
cor(mul1)
library(MASS)
#creating random multivariate data that has
# sample size of 50, mean of 0.5,0,10, and covariance matrix is as sigma
mul1 <- MASS::mvrnorm(n = 50,
mu = c(0.5, 0, 10),
Sigma = matrix(c(1, 0.2, 0.3,
0.2, 1, 0.6,
0.3, 0.6, 1),
nrow = 3))
print(mul1)
mul_kernel_density<-MASS::kde3d(mul1[,1],mul1[,2], n=50)
library(MASS)
biv<-mvnorm(100,
mu=c(0,0),
Sigma = c(1,0.5,1,0.5),nrow=2)
library(MASS)
biv<-mvrnorm(100,
mu=c(0,0),
Sigma = c(1,0.5,1,0.5),nrow=2)
library(MASS)
biv<-mvrnorm(100, # sample size
mu=c(0,0), # Mu
Sigma = c(1,0.5,1,0.5),2) # Covariance matrix
library(MASS)
biv<-mvrnorm(100, # sample size
mu=c(0,0), # Mu
Sigma = matrix(c(1,0.5,1,0.5),2)) # Covariance matrix
print(head(biv,10))
# kernel density estimation
# TMI: Yoo Ri currently did not learn what kernel density is.
biv.kd<-kde2d(biv[,1], biv[,2], n=50)
image(biv.kd)
contour(biv.kd, add=TRUE)
library(MASS)
#creating random multivariate data that has
# sample size of 50, mean of 0.5,0,10, and covariance matrix is as sigma
mul1 <- MASS::mvrnorm(n = 50,
mu = c(0.5, 0, 10),
Sigma = matrix(c(1, 0.2, 0.3,
0.2, 1, 0.6,
0.3, 0.6, 1),
nrow = 3))
print(mul1)
mul1.kd<-kde3d(mul1[,1],mul1[,2],mul1[,3], n=50)
install.packages('misc3d')
library(misc3d)
mul1.kd<-kde3d(mul1[,1],mul1[,2],mul1[,3], n=50)
image(mul1.kd)
image(mul1.kd); contour(mul1.kd)
View(mul1.kd)
image3d(mul1.kd)
contour3d(mul1.kd)
cor(mul1)
